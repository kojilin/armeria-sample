buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        // ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier
        // gradle versions
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.0'
        classpath "gradle.plugin.org.jruyi.gradle:thrift-gradle-plugin:0.3.1"
    }
}

group 'com.example'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'com.google.protobuf'
apply plugin: "org.jruyi.thrift"

configurations {
    javaAgent
}

compileThrift {
    recurse true
    generator 'java', 'private-members'
}

tasks.withType(JavaCompile) {
    sourceCompatibility '1.8'
    targetCompatibility '1.8'
}


repositories {
    mavenCentral()
}

dependencies {
    compile group: 'com.linecorp.armeria', name: 'armeria', version: '0.24.1.Final'

    // Logging
    runtime group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'

    // Embedded Tomcat
    ["core", "jasper", "el"].each { module ->
        runtime group: 'org.apache.tomcat.embed', name: "tomcat-embed-$module", version: '8.5.4'
    }
    runtime group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.21'

    // grpc
    ["grpc-core", "grpc-stub", "grpc-protobuf"].each { module ->
        compile "io.grpc:$module:1.0.0"
    }

    // JVM agent to enable TLS ALPN extension
    javaAgent group: 'org.mortbay.jetty.alpn', name: 'jetty-alpn-agent', version: '2.0.4'
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

// Copy the JVM agent that enables TLS ALPN extension to the build directory.
task copyJavaAgents(type: Copy) {
    from configurations.javaAgent
    into "$buildDir/javaAgents"
    rename { String fileName ->
        fileName.replaceFirst("-[0-9]+\\.[0-9]+\\.[0-9]+\\.[^\\.]+\\.jar", ".jar")
    }
}

// Load the JVM agent that enables TLS ALPN extension for all Java executions.
tasks.withType(JavaForkOptions) {
    dependsOn 'copyJavaAgents'
    // If using spring-boot plugin, you can use the 'agent' property:
    // See: http://jdpgrailsdev.github.io/blog/2014/04/08/spring_boot_gradle_newrelic.html
    jvmArgs "-javaagent:$buildDir/javaAgents/jetty-alpn-agent.jar"
}

idea {
    module {
        sourceDirs += file("${protobuf.generatedFilesBaseDir}/main/java");
        // If you have additional sourceSets and/or codegen plugins, add all of them
        sourceDirs += file("${protobuf.generatedFilesBaseDir}/main/grpc");
    }
}

protobuf {
    protoc {
        // The version of protoc must match protobuf-java. If you don't depend on
        // protobuf-java directly, you will be transitively depending on the
        // protobuf-java version that grpc depends on.
        artifact = "com.google.protobuf:protoc:3.0.0"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.0.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}
